/*
 * generated by Xtext 2.12.0
 */
package de.uniluebeck.isp.tessla.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TeSSLaGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.Model");
		private final Assignment cSpecAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSpecStatementParserRuleCall_0 = (RuleCall)cSpecAssignment.eContents().get(0);
		
		//Model:
		//	spec+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//spec+=Statement*
		public Assignment getSpecAssignment() { return cSpecAssignment; }
		
		//Statement
		public RuleCall getSpecStatementParserRuleCall_0() { return cSpecStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cDefAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cDefDefinitionParserRuleCall_1_0_0 = (RuleCall)cDefAssignment_1_0.eContents().get(0);
		private final Assignment cOutAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cOutOutParserRuleCall_1_1_0 = (RuleCall)cOutAssignment_1_1.eContents().get(0);
		private final Assignment cInAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cInInParserRuleCall_1_2_0 = (RuleCall)cInAssignment_1_2.eContents().get(0);
		private final Assignment cCommentAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cCommentSL_COMMENTTerminalRuleCall_1_3_0 = (RuleCall)cCommentAssignment_1_3.eContents().get(0);
		
		//Statement:
		//	{Statement} (def=definition | out=out | in=in | comment=SL_COMMENT);
		@Override public ParserRule getRule() { return rule; }
		
		//{Statement} (def=definition | out=out | in=in | comment=SL_COMMENT)
		public Group getGroup() { return cGroup; }
		
		//{Statement}
		public Action getStatementAction_0() { return cStatementAction_0; }
		
		//def=definition | out=out | in=in | comment=SL_COMMENT
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//def=definition
		public Assignment getDefAssignment_1_0() { return cDefAssignment_1_0; }
		
		//definition
		public RuleCall getDefDefinitionParserRuleCall_1_0_0() { return cDefDefinitionParserRuleCall_1_0_0; }
		
		//out=out
		public Assignment getOutAssignment_1_1() { return cOutAssignment_1_1; }
		
		//out
		public RuleCall getOutOutParserRuleCall_1_1_0() { return cOutOutParserRuleCall_1_1_0; }
		
		//in=in
		public Assignment getInAssignment_1_2() { return cInAssignment_1_2; }
		
		//in
		public RuleCall getInInParserRuleCall_1_2_0() { return cInInParserRuleCall_1_2_0; }
		
		//comment=SL_COMMENT
		public Assignment getCommentAssignment_1_3() { return cCommentAssignment_1_3; }
		
		//SL_COMMENT
		public RuleCall getCommentSL_COMMENTTerminalRuleCall_1_3_0() { return cCommentSL_COMMENTTerminalRuleCall_1_3_0; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDefineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamListParamListParserRuleCall_2_0 = (RuleCall)cParamListAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_3_1_0 = (RuleCall)cTypeAssignment_3_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionTypedExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		
		//definition:
		//	('def' | 'define') name=ID paramList=paramList? (':' type=type)? ':=' expression=typedExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//('def' | 'define') name=ID paramList=paramList? (':' type=type)? ':=' expression=typedExpression
		public Group getGroup() { return cGroup; }
		
		//'def' | 'define'
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'def'
		public Keyword getDefKeyword_0_0() { return cDefKeyword_0_0; }
		
		//'define'
		public Keyword getDefineKeyword_0_1() { return cDefineKeyword_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//paramList=paramList?
		public Assignment getParamListAssignment_2() { return cParamListAssignment_2; }
		
		//paramList
		public RuleCall getParamListParamListParserRuleCall_2_0() { return cParamListParamListParserRuleCall_2_0; }
		
		//(':' type=type)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//type=type
		public Assignment getTypeAssignment_3_1() { return cTypeAssignment_3_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_3_1_0() { return cTypeTypeParserRuleCall_3_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_4() { return cColonEqualsSignKeyword_4; }
		
		//expression=typedExpression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }
		
		//typedExpression
		public RuleCall getExpressionTypedExpressionParserRuleCall_5_0() { return cExpressionTypedExpressionParserRuleCall_5_0; }
	}
	public class ParamListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.paramList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParamListAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_1_0_1_0 = (RuleCall)cParamsAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_0_2 = (Group)cGroup_1_0.eContents().get(2);
		private final Keyword cColonKeyword_1_0_2_0 = (Keyword)cGroup_1_0_2.eContents().get(0);
		private final Assignment cTypesAssignment_1_0_2_1 = (Assignment)cGroup_1_0_2.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0_2_1_0 = (RuleCall)cTypesAssignment_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cCommaKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cParamsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cParamsIDTerminalRuleCall_1_0_3_1_0 = (RuleCall)cParamsAssignment_1_0_3_1.eContents().get(0);
		private final Group cGroup_1_0_3_2 = (Group)cGroup_1_0_3.eContents().get(2);
		private final Keyword cColonKeyword_1_0_3_2_0 = (Keyword)cGroup_1_0_3_2.eContents().get(0);
		private final Assignment cTypesAssignment_1_0_3_2_1 = (Assignment)cGroup_1_0_3_2.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_0_3_2_1_0 = (RuleCall)cTypesAssignment_1_0_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_4 = (Keyword)cGroup_1_0.eContents().get(4);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		
		//paramList:
		//	{paramList} ('(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')'
		//	| '(' ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{paramList} ('(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')' | '(' ')')
		public Group getGroup() { return cGroup; }
		
		//{paramList}
		public Action getParamListAction_0() { return cParamListAction_0; }
		
		//'(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')' | '(' ')'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//params+=ID
		public Assignment getParamsAssignment_1_0_1() { return cParamsAssignment_1_0_1; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_1_0_1_0() { return cParamsIDTerminalRuleCall_1_0_1_0; }
		
		//(':' types+=type)?
		public Group getGroup_1_0_2() { return cGroup_1_0_2; }
		
		//':'
		public Keyword getColonKeyword_1_0_2_0() { return cColonKeyword_1_0_2_0; }
		
		//types+=type
		public Assignment getTypesAssignment_1_0_2_1() { return cTypesAssignment_1_0_2_1; }
		
		//type
		public RuleCall getTypesTypeParserRuleCall_1_0_2_1_0() { return cTypesTypeParserRuleCall_1_0_2_1_0; }
		
		//(',' params+=ID (':' types+=type)?)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//','
		public Keyword getCommaKeyword_1_0_3_0() { return cCommaKeyword_1_0_3_0; }
		
		//params+=ID
		public Assignment getParamsAssignment_1_0_3_1() { return cParamsAssignment_1_0_3_1; }
		
		//ID
		public RuleCall getParamsIDTerminalRuleCall_1_0_3_1_0() { return cParamsIDTerminalRuleCall_1_0_3_1_0; }
		
		//(':' types+=type)?
		public Group getGroup_1_0_3_2() { return cGroup_1_0_3_2; }
		
		//':'
		public Keyword getColonKeyword_1_0_3_2_0() { return cColonKeyword_1_0_3_2_0; }
		
		//types+=type
		public Assignment getTypesAssignment_1_0_3_2_1() { return cTypesAssignment_1_0_3_2_1; }
		
		//type
		public RuleCall getTypesTypeParserRuleCall_1_0_3_2_1_0() { return cTypesTypeParserRuleCall_1_0_3_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_4() { return cRightParenthesisKeyword_1_0_4; }
		
		//'(' ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_1() { return cRightParenthesisKeyword_1_1_1; }
	}
	public class OutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.out");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpTypedExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//out:
		//	'out' exp=typedExpression ('as' name=ID)?
		//	//	'out' def=[definition]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'out' exp=typedExpression ('as' name=ID)?
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//exp=typedExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//typedExpression
		public RuleCall getExpTypedExpressionParserRuleCall_1_0() { return cExpTypedExpressionParserRuleCall_1_0; }
		
		//('as' name=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
	}
	public class InElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.in");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//in:
		//	'in' name=ID ':' type=type;
		@Override public ParserRule getRule() { return rule; }
		
		//'in' name=ID ':' type=type
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }
	}
	public class TypedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.typedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpExpressionParserRuleCall_0_0 = (RuleCall)cExpAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//typedExpression:
		//	exp=expression (':' type=type)?;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=expression (':' type=type)?
		public Group getGroup() { return cGroup; }
		
		//exp=expression
		public Assignment getExpAssignment_0() { return cExpAssignment_0; }
		
		//expression
		public RuleCall getExpExpressionParserRuleCall_0_0() { return cExpExpressionParserRuleCall_0_0; }
		
		//(':' type=type)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIfStatementAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIfKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIfAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cIfTypedExpressionParserRuleCall_0_2_0 = (RuleCall)cIfAssignment_0_2.eContents().get(0);
		private final Keyword cThenKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cThenAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cThenTypedExpressionParserRuleCall_0_4_0 = (RuleCall)cThenAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cElseKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cElseAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cElseTypedExpressionParserRuleCall_0_5_1_0 = (RuleCall)cElseAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cValueParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cOperationLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOpInfixOperatorParserRuleCall_1_1_1_0 = (RuleCall)cOpAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//expression:
		//	{IfStatement} 'if' if=typedExpression 'then' then=typedExpression ('else' else=typedExpression)?
		//	| value ({Operation.left=current} op=infixOperator right=value)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{IfStatement} 'if' if=typedExpression 'then' then=typedExpression ('else' else=typedExpression)? | value
		//({Operation.left=current} op=infixOperator right=value)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{IfStatement} 'if' if=typedExpression 'then' then=typedExpression ('else' else=typedExpression)?
		public Group getGroup_0() { return cGroup_0; }
		
		//{IfStatement}
		public Action getIfStatementAction_0_0() { return cIfStatementAction_0_0; }
		
		//'if'
		public Keyword getIfKeyword_0_1() { return cIfKeyword_0_1; }
		
		//if=typedExpression
		public Assignment getIfAssignment_0_2() { return cIfAssignment_0_2; }
		
		//typedExpression
		public RuleCall getIfTypedExpressionParserRuleCall_0_2_0() { return cIfTypedExpressionParserRuleCall_0_2_0; }
		
		//'then'
		public Keyword getThenKeyword_0_3() { return cThenKeyword_0_3; }
		
		//then=typedExpression
		public Assignment getThenAssignment_0_4() { return cThenAssignment_0_4; }
		
		//typedExpression
		public RuleCall getThenTypedExpressionParserRuleCall_0_4_0() { return cThenTypedExpressionParserRuleCall_0_4_0; }
		
		//('else' else=typedExpression)?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//'else'
		public Keyword getElseKeyword_0_5_0() { return cElseKeyword_0_5_0; }
		
		//else=typedExpression
		public Assignment getElseAssignment_0_5_1() { return cElseAssignment_0_5_1; }
		
		//typedExpression
		public RuleCall getElseTypedExpressionParserRuleCall_0_5_1_0() { return cElseTypedExpressionParserRuleCall_0_5_1_0; }
		
		//value ({Operation.left=current} op=infixOperator right=value)*
		public Group getGroup_1() { return cGroup_1; }
		
		//value
		public RuleCall getValueParserRuleCall_1_0() { return cValueParserRuleCall_1_0; }
		
		//({Operation.left=current} op=infixOperator right=value)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Operation.left=current}
		public Action getOperationLeftAction_1_1_0() { return cOperationLeftAction_1_1_0; }
		
		//op=infixOperator
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }
		
		//infixOperator
		public RuleCall getOpInfixOperatorParserRuleCall_1_1_1_0() { return cOpInfixOperatorParserRuleCall_1_1_1_0; }
		
		//right=value
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//value
		public RuleCall getRightValueParserRuleCall_1_1_2_0() { return cRightValueParserRuleCall_1_1_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cOpUnaryOperatorParserRuleCall_1_0_0_0 = (RuleCall)cOpAssignment_1_0_0.eContents().get(0);
		private final Assignment cExpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpTypedExpressionParserRuleCall_1_0_1_0 = (RuleCall)cExpAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpTypedExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cStatementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_2_1_0 = (RuleCall)cStatementsAssignment_1_2_1.eContents().get(0);
		private final Assignment cExpAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cExpTypedExpressionParserRuleCall_1_2_2_0 = (RuleCall)cExpAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Assignment cNameAssignment_1_3_0 = (Assignment)cGroup_1_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_3_0_0 = (RuleCall)cNameAssignment_1_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Assignment cArgsAssignment_1_3_2_0 = (Assignment)cGroup_1_3_2.eContents().get(0);
		private final RuleCall cArgsArgParserRuleCall_1_3_2_0_0 = (RuleCall)cArgsAssignment_1_3_2_0.eContents().get(0);
		private final Group cGroup_1_3_2_1 = (Group)cGroup_1_3_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_3_2_1_0 = (Keyword)cGroup_1_3_2_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_2_1_1 = (Assignment)cGroup_1_3_2_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_1_3_2_1_1_0 = (RuleCall)cArgsAssignment_1_3_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Assignment cNameAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_1_4_0 = (RuleCall)cNameAssignment_1_4.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_7 = (Keyword)cAlternatives_1.eContents().get(7);
		private final Keyword cTrueKeyword_1_8 = (Keyword)cAlternatives_1.eContents().get(8);
		private final Keyword cFalseKeyword_1_9 = (Keyword)cAlternatives_1.eContents().get(9);
		
		//value:
		//	{value} (op=unaryOperator exp=typedExpression
		//	| '(' exp=typedExpression ')'
		//	| '{' statements+=Statement* exp=typedExpression '}'
		//	| name=ID '(' (args+=arg (',' args+=arg)*)? ')'
		//	| name=ID
		//	| STRING
		//	| INT
		//	| '()'
		//	| 'true'
		//	| 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{value} (op=unaryOperator exp=typedExpression | '(' exp=typedExpression ')' | '{' statements+=Statement*
		//exp=typedExpression '}' | name=ID '(' (args+=arg (',' args+=arg)*)? ')' | name=ID | STRING | INT | '()' | 'true' |
		//'false')
		public Group getGroup() { return cGroup; }
		
		//{value}
		public Action getValueAction_0() { return cValueAction_0; }
		
		//op=unaryOperator exp=typedExpression | '(' exp=typedExpression ')' | '{' statements+=Statement* exp=typedExpression '}'
		//| name=ID '(' (args+=arg (',' args+=arg)*)? ')' | name=ID | STRING | INT | '()' | 'true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//op=unaryOperator exp=typedExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//op=unaryOperator
		public Assignment getOpAssignment_1_0_0() { return cOpAssignment_1_0_0; }
		
		//unaryOperator
		public RuleCall getOpUnaryOperatorParserRuleCall_1_0_0_0() { return cOpUnaryOperatorParserRuleCall_1_0_0_0; }
		
		//exp=typedExpression
		public Assignment getExpAssignment_1_0_1() { return cExpAssignment_1_0_1; }
		
		//typedExpression
		public RuleCall getExpTypedExpressionParserRuleCall_1_0_1_0() { return cExpTypedExpressionParserRuleCall_1_0_1_0; }
		
		//'(' exp=typedExpression ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//exp=typedExpression
		public Assignment getExpAssignment_1_1_1() { return cExpAssignment_1_1_1; }
		
		//typedExpression
		public RuleCall getExpTypedExpressionParserRuleCall_1_1_1_0() { return cExpTypedExpressionParserRuleCall_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
		
		//'{' statements+=Statement* exp=typedExpression '}'
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2_0() { return cLeftCurlyBracketKeyword_1_2_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_1_2_1() { return cStatementsAssignment_1_2_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_2_1_0() { return cStatementsStatementParserRuleCall_1_2_1_0; }
		
		//exp=typedExpression
		public Assignment getExpAssignment_1_2_2() { return cExpAssignment_1_2_2; }
		
		//typedExpression
		public RuleCall getExpTypedExpressionParserRuleCall_1_2_2_0() { return cExpTypedExpressionParserRuleCall_1_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2_3() { return cRightCurlyBracketKeyword_1_2_3; }
		
		//name=ID '(' (args+=arg (',' args+=arg)*)? ')'
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//name=ID
		public Assignment getNameAssignment_1_3_0() { return cNameAssignment_1_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_3_0_0() { return cNameIDTerminalRuleCall_1_3_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3_1() { return cLeftParenthesisKeyword_1_3_1; }
		
		//(args+=arg (',' args+=arg)*)?
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }
		
		//args+=arg
		public Assignment getArgsAssignment_1_3_2_0() { return cArgsAssignment_1_3_2_0; }
		
		//arg
		public RuleCall getArgsArgParserRuleCall_1_3_2_0_0() { return cArgsArgParserRuleCall_1_3_2_0_0; }
		
		//(',' args+=arg)*
		public Group getGroup_1_3_2_1() { return cGroup_1_3_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_3_2_1_0() { return cCommaKeyword_1_3_2_1_0; }
		
		//args+=arg
		public Assignment getArgsAssignment_1_3_2_1_1() { return cArgsAssignment_1_3_2_1_1; }
		
		//arg
		public RuleCall getArgsArgParserRuleCall_1_3_2_1_1_0() { return cArgsArgParserRuleCall_1_3_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3_3() { return cRightParenthesisKeyword_1_3_3; }
		
		//name=ID
		public Assignment getNameAssignment_1_4() { return cNameAssignment_1_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_4_0() { return cNameIDTerminalRuleCall_1_4_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_5() { return cSTRINGTerminalRuleCall_1_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_6() { return cINTTerminalRuleCall_1_6; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_7() { return cLeftParenthesisRightParenthesisKeyword_1_7; }
		
		//'true'
		public Keyword getTrueKeyword_1_8() { return cTrueKeyword_1_8; }
		
		//'false'
		public Keyword getFalseKeyword_1_9() { return cFalseKeyword_1_9; }
	}
	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cArgAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cArgIDTerminalRuleCall_0_0_0 = (RuleCall)cArgAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpTypedExpressionParserRuleCall_0_2_0 = (RuleCall)cExpAssignment_0_2.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpTypedExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//arg:
		//	arg=ID '=' exp=typedExpression
		//	| exp=typedExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//arg=ID '=' exp=typedExpression | exp=typedExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//arg=ID '=' exp=typedExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//arg=ID
		public Assignment getArgAssignment_0_0() { return cArgAssignment_0_0; }
		
		//ID
		public RuleCall getArgIDTerminalRuleCall_0_0_0() { return cArgIDTerminalRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//exp=typedExpression
		public Assignment getExpAssignment_0_2() { return cExpAssignment_0_2; }
		
		//typedExpression
		public RuleCall getExpTypedExpressionParserRuleCall_0_2_0() { return cExpTypedExpressionParserRuleCall_0_2_0; }
		
		//exp=typedExpression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//typedExpression
		public RuleCall getExpTypedExpressionParserRuleCall_1_0() { return cExpTypedExpressionParserRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_0_3_1 = (RuleCall)cGroup_0_3.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//type:
		//	ID '<' type (',' type)* '>' | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID '<' type (',' type)* '>' | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID '<' type (',' type)* '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//type
		public RuleCall getTypeParserRuleCall_0_2() { return cTypeParserRuleCall_0_2; }
		
		//(',' type)*
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//','
		public Keyword getCommaKeyword_0_3_0() { return cCommaKeyword_0_3_0; }
		
		//type
		public RuleCall getTypeParserRuleCall_0_3_1() { return cTypeParserRuleCall_0_3_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_4() { return cGreaterThanSignKeyword_0_4; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class InfixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.infixOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cEqualsSignEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAmpersandKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cVerticalLineKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cCircumflexAccentKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cPlusSignKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cHyphenMinusKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cAsteriskKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSolidusKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cAmpersandAmpersandKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cVerticalLineVerticalLineKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		
		//infixOperator:
		//	'%'
		//	| '<<'
		//	| '>>'
		//	| '>='
		//	| '<='
		//	| '<'
		//	| '>'
		//	| '!='
		//	| '=='
		//	| '&'
		//	| '|'
		//	| '^'
		//	| '+'
		//	| '-'
		//	| '*'
		//	| '/'
		//	| '&&'
		//	| '||';
		@Override public ParserRule getRule() { return rule; }
		
		//'%' | '<<' | '>>' | '>=' | '<=' | '<' | '>' | '!=' | '==' | '&' | '|' | '^' | '+' | '-' | '*' | '/' | '&&' | '||'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'%'
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2() { return cGreaterThanSignGreaterThanSignKeyword_2; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_4() { return cLessThanSignEqualsSignKeyword_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6() { return cGreaterThanSignKeyword_6; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7() { return cExclamationMarkEqualsSignKeyword_7; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_8() { return cEqualsSignEqualsSignKeyword_8; }
		
		//'&'
		public Keyword getAmpersandKeyword_9() { return cAmpersandKeyword_9; }
		
		//'|'
		public Keyword getVerticalLineKeyword_10() { return cVerticalLineKeyword_10; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_11() { return cCircumflexAccentKeyword_11; }
		
		//'+'
		public Keyword getPlusSignKeyword_12() { return cPlusSignKeyword_12; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_13() { return cHyphenMinusKeyword_13; }
		
		//'*'
		public Keyword getAsteriskKeyword_14() { return cAsteriskKeyword_14; }
		
		//'/'
		public Keyword getSolidusKeyword_15() { return cSolidusKeyword_15; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_16() { return cAmpersandAmpersandKeyword_16; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_17() { return cVerticalLineVerticalLineKeyword_17; }
	}
	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.unaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//unaryOperator:
		//	'~'
		//	| '-'
		//	| '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'~' | '-' | '!'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'~'
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final TerminalRule tSL_COMMENT;
	private final DefinitionElements pDefinition;
	private final ParamListElements pParamList;
	private final OutElements pOut;
	private final InElements pIn;
	private final TypedExpressionElements pTypedExpression;
	private final ExpressionElements pExpression;
	private final ValueElements pValue;
	private final ArgElements pArg;
	private final TypeElements pType;
	private final InfixOperatorElements pInfixOperator;
	private final UnaryOperatorElements pUnaryOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TeSSLaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.uniluebeck.isp.tessla.xtext.TeSSLa.SL_COMMENT");
		this.pDefinition = new DefinitionElements();
		this.pParamList = new ParamListElements();
		this.pOut = new OutElements();
		this.pIn = new InElements();
		this.pTypedExpression = new TypedExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pValue = new ValueElements();
		this.pArg = new ArgElements();
		this.pType = new TypeElements();
		this.pInfixOperator = new InfixOperatorElements();
		this.pUnaryOperator = new UnaryOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.uniluebeck.isp.tessla.xtext.TeSSLa".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	spec+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//	{Statement} (def=definition | out=out | in=in | comment=SL_COMMENT);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//@ Override terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//definition:
	//	('def' | 'define') name=ID paramList=paramList? (':' type=type)? ':=' expression=typedExpression;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//paramList:
	//	{paramList} ('(' params+=ID (':' types+=type)? (',' params+=ID (':' types+=type)?)* ')'
	//	| '(' ')');
	public ParamListElements getParamListAccess() {
		return pParamList;
	}
	
	public ParserRule getParamListRule() {
		return getParamListAccess().getRule();
	}
	
	//out:
	//	'out' exp=typedExpression ('as' name=ID)?
	//	//	'out' def=[definition]
	//;
	public OutElements getOutAccess() {
		return pOut;
	}
	
	public ParserRule getOutRule() {
		return getOutAccess().getRule();
	}
	
	//in:
	//	'in' name=ID ':' type=type;
	public InElements getInAccess() {
		return pIn;
	}
	
	public ParserRule getInRule() {
		return getInAccess().getRule();
	}
	
	//typedExpression:
	//	exp=expression (':' type=type)?;
	public TypedExpressionElements getTypedExpressionAccess() {
		return pTypedExpression;
	}
	
	public ParserRule getTypedExpressionRule() {
		return getTypedExpressionAccess().getRule();
	}
	
	//expression:
	//	{IfStatement} 'if' if=typedExpression 'then' then=typedExpression ('else' else=typedExpression)?
	//	| value ({Operation.left=current} op=infixOperator right=value)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//value:
	//	{value} (op=unaryOperator exp=typedExpression
	//	| '(' exp=typedExpression ')'
	//	| '{' statements+=Statement* exp=typedExpression '}'
	//	| name=ID '(' (args+=arg (',' args+=arg)*)? ')'
	//	| name=ID
	//	| STRING
	//	| INT
	//	| '()'
	//	| 'true'
	//	| 'false');
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//arg:
	//	arg=ID '=' exp=typedExpression
	//	| exp=typedExpression;
	public ArgElements getArgAccess() {
		return pArg;
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}
	
	//type:
	//	ID '<' type (',' type)* '>' | ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//infixOperator:
	//	'%'
	//	| '<<'
	//	| '>>'
	//	| '>='
	//	| '<='
	//	| '<'
	//	| '>'
	//	| '!='
	//	| '=='
	//	| '&'
	//	| '|'
	//	| '^'
	//	| '+'
	//	| '-'
	//	| '*'
	//	| '/'
	//	| '&&'
	//	| '||';
	public InfixOperatorElements getInfixOperatorAccess() {
		return pInfixOperator;
	}
	
	public ParserRule getInfixOperatorRule() {
		return getInfixOperatorAccess().getRule();
	}
	
	//unaryOperator:
	//	'~'
	//	| '-'
	//	| '!';
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return pUnaryOperator;
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
