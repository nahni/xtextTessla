/**
 * generated by Xtext 2.12.0
 */
package de.uniluebeck.isp.tessla.xtext.ui.contentassist;

import de.uniluebeck.isp.tessla.xtext.teSSLa.Model;
import de.uniluebeck.isp.tessla.xtext.teSSLa.Statement;
import de.uniluebeck.isp.tessla.xtext.teSSLa.definition;
import de.uniluebeck.isp.tessla.xtext.teSSLa.in;
import de.uniluebeck.isp.tessla.xtext.ui.contentassist.AbstractTeSSLaProposalProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class TeSSLaProposalProvider extends AbstractTeSSLaProposalProvider {
  @Override
  public void complete_typedExpression(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_out(model, ruleCall, context, acceptor);
    EObject _rootModel = context.getRootModel();
    final Model rootModel = ((Model) _rootModel);
    EList<Statement> _spec = rootModel.getSpec();
    for (final Statement statement : _spec) {
      definition _def = statement.getDef();
      boolean _tripleNotEquals = (_def != null);
      if (_tripleNotEquals) {
        final String proposal = statement.getDef().getName();
        acceptor.accept(this.createCompletionProposal(proposal, context));
      } else {
        in _in = statement.getIn();
        boolean _tripleNotEquals_1 = (_in != null);
        if (_tripleNotEquals_1) {
          final String proposal_1 = statement.getIn().getName();
          acceptor.accept(this.createCompletionProposal(proposal_1, context));
        }
      }
    }
  }
  
  @Override
  public void complete_value(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    super.complete_out(model, ruleCall, context, acceptor);
    EObject _rootModel = context.getRootModel();
    final Model rootModel = ((Model) _rootModel);
    EList<Statement> _spec = rootModel.getSpec();
    for (final Statement statement : _spec) {
      definition _def = statement.getDef();
      boolean _tripleNotEquals = (_def != null);
      if (_tripleNotEquals) {
        final String proposal = statement.getDef().getName();
        acceptor.accept(this.createCompletionProposal(proposal, context));
      } else {
        in _in = statement.getIn();
        boolean _tripleNotEquals_1 = (_in != null);
        if (_tripleNotEquals_1) {
          final String proposal_1 = statement.getIn().getName();
          acceptor.accept(this.createCompletionProposal(proposal_1, context));
        }
      }
    }
  }
}
