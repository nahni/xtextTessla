/*
 * generated by Xtext 2.12.0
 */
package de.uniluebeck.isp.tessla.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import de.uniluebeck.isp.tessla.xtext.ide.contentassist.antlr.internal.InternalTeSSLaParser;
import de.uniluebeck.isp.tessla.xtext.services.TeSSLaGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class TeSSLaParser extends AbstractContentAssistParser {

	@Inject
	private TeSSLaGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTeSSLaParser createParser() {
		InternalTeSSLaParser result = new InternalTeSSLaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives_1(), "rule__Statement__Alternatives_1");
					put(grammarAccess.getDefinitionAccess().getAlternatives_0(), "rule__Definition__Alternatives_0");
					put(grammarAccess.getParamListAccess().getAlternatives_1(), "rule__ParamList__Alternatives_1");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives_1(), "rule__Value__Alternatives_1");
					put(grammarAccess.getArgAccess().getAlternatives(), "rule__Arg__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getInfixOperatorAccess().getAlternatives(), "rule__InfixOperator__Alternatives");
					put(grammarAccess.getUnaryOperatorAccess().getAlternatives(), "rule__UnaryOperator__Alternatives");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
					put(grammarAccess.getDefinitionAccess().getGroup_3(), "rule__Definition__Group_3__0");
					put(grammarAccess.getParamListAccess().getGroup(), "rule__ParamList__Group__0");
					put(grammarAccess.getParamListAccess().getGroup_1_0(), "rule__ParamList__Group_1_0__0");
					put(grammarAccess.getParamListAccess().getGroup_1_0_2(), "rule__ParamList__Group_1_0_2__0");
					put(grammarAccess.getParamListAccess().getGroup_1_0_3(), "rule__ParamList__Group_1_0_3__0");
					put(grammarAccess.getParamListAccess().getGroup_1_0_3_2(), "rule__ParamList__Group_1_0_3_2__0");
					put(grammarAccess.getParamListAccess().getGroup_1_1(), "rule__ParamList__Group_1_1__0");
					put(grammarAccess.getOutAccess().getGroup(), "rule__Out__Group__0");
					put(grammarAccess.getOutAccess().getGroup_2(), "rule__Out__Group_2__0");
					put(grammarAccess.getInAccess().getGroup(), "rule__In__Group__0");
					put(grammarAccess.getTypedExpressionAccess().getGroup(), "rule__TypedExpression__Group__0");
					put(grammarAccess.getTypedExpressionAccess().getGroup_1(), "rule__TypedExpression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_0(), "rule__Expression__Group_0__0");
					put(grammarAccess.getExpressionAccess().getGroup_0_5(), "rule__Expression__Group_0_5__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getExpressionAccess().getGroup_1_1(), "rule__Expression__Group_1_1__0");
					put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
					put(grammarAccess.getValueAccess().getGroup_1_0(), "rule__Value__Group_1_0__0");
					put(grammarAccess.getValueAccess().getGroup_1_1(), "rule__Value__Group_1_1__0");
					put(grammarAccess.getValueAccess().getGroup_1_2(), "rule__Value__Group_1_2__0");
					put(grammarAccess.getValueAccess().getGroup_1_3(), "rule__Value__Group_1_3__0");
					put(grammarAccess.getValueAccess().getGroup_1_3_2(), "rule__Value__Group_1_3_2__0");
					put(grammarAccess.getValueAccess().getGroup_1_3_2_1(), "rule__Value__Group_1_3_2_1__0");
					put(grammarAccess.getArgAccess().getGroup_0(), "rule__Arg__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_0(), "rule__Type__Group_0__0");
					put(grammarAccess.getTypeAccess().getGroup_0_3(), "rule__Type__Group_0_3__0");
					put(grammarAccess.getModelAccess().getSpecAssignment(), "rule__Model__SpecAssignment");
					put(grammarAccess.getStatementAccess().getDefAssignment_1_0(), "rule__Statement__DefAssignment_1_0");
					put(grammarAccess.getStatementAccess().getOutAssignment_1_1(), "rule__Statement__OutAssignment_1_1");
					put(grammarAccess.getStatementAccess().getInAssignment_1_2(), "rule__Statement__InAssignment_1_2");
					put(grammarAccess.getStatementAccess().getCommentAssignment_1_3(), "rule__Statement__CommentAssignment_1_3");
					put(grammarAccess.getDefinitionAccess().getNameAssignment_1(), "rule__Definition__NameAssignment_1");
					put(grammarAccess.getDefinitionAccess().getParamListAssignment_2(), "rule__Definition__ParamListAssignment_2");
					put(grammarAccess.getDefinitionAccess().getTypeAssignment_3_1(), "rule__Definition__TypeAssignment_3_1");
					put(grammarAccess.getDefinitionAccess().getExpressionAssignment_5(), "rule__Definition__ExpressionAssignment_5");
					put(grammarAccess.getParamListAccess().getParamsAssignment_1_0_1(), "rule__ParamList__ParamsAssignment_1_0_1");
					put(grammarAccess.getParamListAccess().getTypesAssignment_1_0_2_1(), "rule__ParamList__TypesAssignment_1_0_2_1");
					put(grammarAccess.getParamListAccess().getParamsAssignment_1_0_3_1(), "rule__ParamList__ParamsAssignment_1_0_3_1");
					put(grammarAccess.getParamListAccess().getTypesAssignment_1_0_3_2_1(), "rule__ParamList__TypesAssignment_1_0_3_2_1");
					put(grammarAccess.getOutAccess().getExpAssignment_1(), "rule__Out__ExpAssignment_1");
					put(grammarAccess.getOutAccess().getNameAssignment_2_1(), "rule__Out__NameAssignment_2_1");
					put(grammarAccess.getInAccess().getNameAssignment_1(), "rule__In__NameAssignment_1");
					put(grammarAccess.getInAccess().getTypeAssignment_3(), "rule__In__TypeAssignment_3");
					put(grammarAccess.getTypedExpressionAccess().getExpAssignment_0(), "rule__TypedExpression__ExpAssignment_0");
					put(grammarAccess.getTypedExpressionAccess().getTypeAssignment_1_1(), "rule__TypedExpression__TypeAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getIfAssignment_0_2(), "rule__Expression__IfAssignment_0_2");
					put(grammarAccess.getExpressionAccess().getThenAssignment_0_4(), "rule__Expression__ThenAssignment_0_4");
					put(grammarAccess.getExpressionAccess().getElseAssignment_0_5_1(), "rule__Expression__ElseAssignment_0_5_1");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_1_1(), "rule__Expression__OpAssignment_1_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_1_2(), "rule__Expression__RightAssignment_1_1_2");
					put(grammarAccess.getValueAccess().getOpAssignment_1_0_0(), "rule__Value__OpAssignment_1_0_0");
					put(grammarAccess.getValueAccess().getExpAssignment_1_0_1(), "rule__Value__ExpAssignment_1_0_1");
					put(grammarAccess.getValueAccess().getExpAssignment_1_1_1(), "rule__Value__ExpAssignment_1_1_1");
					put(grammarAccess.getValueAccess().getStatementsAssignment_1_2_1(), "rule__Value__StatementsAssignment_1_2_1");
					put(grammarAccess.getValueAccess().getExpAssignment_1_2_2(), "rule__Value__ExpAssignment_1_2_2");
					put(grammarAccess.getValueAccess().getNameAssignment_1_3_0(), "rule__Value__NameAssignment_1_3_0");
					put(grammarAccess.getValueAccess().getArgsAssignment_1_3_2_0(), "rule__Value__ArgsAssignment_1_3_2_0");
					put(grammarAccess.getValueAccess().getArgsAssignment_1_3_2_1_1(), "rule__Value__ArgsAssignment_1_3_2_1_1");
					put(grammarAccess.getValueAccess().getNameAssignment_1_4(), "rule__Value__NameAssignment_1_4");
					put(grammarAccess.getArgAccess().getArgAssignment_0_0(), "rule__Arg__ArgAssignment_0_0");
					put(grammarAccess.getArgAccess().getExpAssignment_0_2(), "rule__Arg__ExpAssignment_0_2");
					put(grammarAccess.getArgAccess().getExpAssignment_1(), "rule__Arg__ExpAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TeSSLaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TeSSLaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
